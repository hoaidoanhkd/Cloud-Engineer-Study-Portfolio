{"version":3,"file":"main-CxZDBXj0.js","sources":["../../src/utils/storage.ts","../../src/main.ts","../../src/utils/quiz-manager.ts"],"sourcesContent":["import type { QuizSession, QuizSettings, BookmarkedQuestion, QuizStats } from '../types/quiz.ts';\n\nexport class StorageManager {\n  private static readonly KEYS = {\n    QUIZ_SESSIONS: 'gcp-quiz-sessions',\n    QUIZ_SETTINGS: 'gcp-quiz-settings',\n    BOOKMARKED_QUESTIONS: 'gcp-quiz-bookmarks',\n    QUIZ_STATS: 'gcp-quiz-stats',\n    CURRENT_SESSION: 'gcp-quiz-current-session',\n    THEME: 'gcp-quiz-theme'\n  } as const;\n\n  // Quiz Sessions\n  static saveSession(session: QuizSession): void {\n    try {\n      const sessions = this.getSessions();\n      const existingIndex = sessions.findIndex(s => s.id === session.id);\n      \n      if (existingIndex >= 0) {\n        sessions[existingIndex] = session;\n      } else {\n        sessions.push(session);\n      }\n      \n      // Keep only last 50 sessions\n      if (sessions.length > 50) {\n        sessions.splice(0, sessions.length - 50);\n      }\n      \n      localStorage.setItem(this.KEYS.QUIZ_SESSIONS, JSON.stringify(sessions));\n    } catch (error) {\n      console.error('Failed to save quiz session:', error);\n    }\n  }\n\n  static getSessions(): QuizSession[] {\n    try {\n      const data = localStorage.getItem(this.KEYS.QUIZ_SESSIONS);\n      if (!data) return [];\n      \n      const sessions = JSON.parse(data);\n      return sessions.map((session: any) => ({\n        ...session,\n        startTime: new Date(session.startTime),\n        endTime: session.endTime ? new Date(session.endTime) : undefined,\n        answers: session.answers.map((answer: any) => ({\n          ...answer,\n          timestamp: new Date(answer.timestamp)\n        }))\n      }));\n    } catch (error) {\n      console.error('Failed to load quiz sessions:', error);\n      return [];\n    }\n  }\n\n  static getCurrentSession(): QuizSession | null {\n    try {\n      const data = localStorage.getItem(this.KEYS.CURRENT_SESSION);\n      if (!data) return null;\n      \n      const session = JSON.parse(data);\n      return {\n        ...session,\n        startTime: new Date(session.startTime),\n        endTime: session.endTime ? new Date(session.endTime) : undefined,\n        answers: session.answers.map((answer: any) => ({\n          ...answer,\n          timestamp: new Date(answer.timestamp)\n        }))\n      };\n    } catch (error) {\n      console.error('Failed to load current session:', error);\n      return null;\n    }\n  }\n\n  static saveCurrentSession(session: QuizSession): void {\n    try {\n      localStorage.setItem(this.KEYS.CURRENT_SESSION, JSON.stringify(session));\n    } catch (error) {\n      console.error('Failed to save current session:', error);\n    }\n  }\n\n  static clearCurrentSession(): void {\n    localStorage.removeItem(this.KEYS.CURRENT_SESSION);\n  }\n\n  // Quiz Settings\n  static getSettings(): QuizSettings {\n    try {\n      const data = localStorage.getItem(this.KEYS.QUIZ_SETTINGS);\n      if (!data) return this.getDefaultSettings();\n      \n      return { ...this.getDefaultSettings(), ...JSON.parse(data) };\n    } catch (error) {\n      console.error('Failed to load quiz settings:', error);\n      return this.getDefaultSettings();\n    }\n  }\n\n  static saveSettings(settings: Partial<QuizSettings>): void {\n    try {\n      const currentSettings = this.getSettings();\n      const newSettings = { ...currentSettings, ...settings };\n      localStorage.setItem(this.KEYS.QUIZ_SETTINGS, JSON.stringify(newSettings));\n    } catch (error) {\n      console.error('Failed to save quiz settings:', error);\n    }\n  }\n\n  private static getDefaultSettings(): QuizSettings {\n    return {\n      theme: 'auto',\n      showExplanations: true,\n      showTimer: true,\n      autoAdvance: false,\n      randomizeQuestions: false,\n      randomizeOptions: false,\n      questionsPerSession: 25,\n      enableSound: false\n    };\n  }\n\n  // Bookmarked Questions\n  static getBookmarkedQuestions(): BookmarkedQuestion[] {\n    try {\n      const data = localStorage.getItem(this.KEYS.BOOKMARKED_QUESTIONS);\n      if (!data) return [];\n      \n      const bookmarks = JSON.parse(data);\n      return bookmarks.map((bookmark: any) => ({\n        ...bookmark,\n        timestamp: new Date(bookmark.timestamp)\n      }));\n    } catch (error) {\n      console.error('Failed to load bookmarked questions:', error);\n      return [];\n    }\n  }\n\n  static addBookmark(bookmark: BookmarkedQuestion): void {\n    try {\n      const bookmarks = this.getBookmarkedQuestions();\n      const existingIndex = bookmarks.findIndex(b => b.questionId === bookmark.questionId);\n      \n      if (existingIndex >= 0) {\n        bookmarks[existingIndex] = bookmark;\n      } else {\n        bookmarks.push(bookmark);\n      }\n      \n      localStorage.setItem(this.KEYS.BOOKMARKED_QUESTIONS, JSON.stringify(bookmarks));\n    } catch (error) {\n      console.error('Failed to add bookmark:', error);\n    }\n  }\n\n  static removeBookmark(questionId: string): void {\n    try {\n      const bookmarks = this.getBookmarkedQuestions();\n      const filtered = bookmarks.filter(b => b.questionId !== questionId);\n      localStorage.setItem(this.KEYS.BOOKMARKED_QUESTIONS, JSON.stringify(filtered));\n    } catch (error) {\n      console.error('Failed to remove bookmark:', error);\n    }\n  }\n\n  static isBookmarked(questionId: string): boolean {\n    const bookmarks = this.getBookmarkedQuestions();\n    return bookmarks.some(b => b.questionId === questionId);\n  }\n\n  // Quiz Statistics\n  static getStats(): QuizStats {\n    try {\n      const data = localStorage.getItem(this.KEYS.QUIZ_STATS);\n      if (!data) return this.getDefaultStats();\n      \n      const stats = JSON.parse(data);\n      return {\n        ...stats,\n        recentSessions: stats.recentSessions.map((session: any) => ({\n          ...session,\n          startTime: new Date(session.startTime),\n          endTime: session.endTime ? new Date(session.endTime) : undefined\n        }))\n      };\n    } catch (error) {\n      console.error('Failed to load quiz stats:', error);\n      return this.getDefaultStats();\n    }\n  }\n\n  static updateStats(session: QuizSession): void {\n    try {\n      const stats = this.getStats();\n      \n      // Update basic stats\n      stats.totalQuestions += session.answers.length;\n      stats.correctAnswers += session.answers.filter(a => a.isCorrect).length;\n      stats.incorrectAnswers += session.answers.filter(a => !a.isCorrect).length;\n      \n      // Update average time\n      const totalTime = session.answers.reduce((sum, a) => sum + a.timeSpent, 0);\n      stats.averageTimePerQuestion = totalTime / session.answers.length;\n      \n      // Update category performance\n      session.questions.forEach((question, index) => {\n        const answer = session.answers[index];\n        if (!answer) return;\n        \n        const category = question.category || 'Unknown';\n        if (!stats.categoryPerformance[category]) {\n          stats.categoryPerformance[category] = {\n            category,\n            totalQuestions: 0,\n            correctAnswers: 0,\n            accuracy: 0,\n            averageTime: 0\n          };\n        }\n        \n        const categoryStats = stats.categoryPerformance[category];\n        categoryStats.totalQuestions++;\n        if (answer.isCorrect) categoryStats.correctAnswers++;\n        categoryStats.accuracy = (categoryStats.correctAnswers / categoryStats.totalQuestions) * 100;\n        categoryStats.averageTime = answer.timeSpent;\n      });\n      \n      // Update difficulty performance\n      session.questions.forEach((question, index) => {\n        const answer = session.answers[index];\n        if (!answer) return;\n        \n        const difficulty = question.difficulty || 'medium';\n        if (!stats.difficultyPerformance[difficulty]) {\n          stats.difficultyPerformance[difficulty] = {\n            difficulty,\n            totalQuestions: 0,\n            correctAnswers: 0,\n            accuracy: 0,\n            averageTime: 0\n          };\n        }\n        \n        const difficultyStats = stats.difficultyPerformance[difficulty];\n        difficultyStats.totalQuestions++;\n        if (answer.isCorrect) difficultyStats.correctAnswers++;\n        difficultyStats.accuracy = (difficultyStats.correctAnswers / difficultyStats.totalQuestions) * 100;\n        difficultyStats.averageTime = answer.timeSpent;\n      });\n      \n      // Add to recent sessions\n      stats.recentSessions.unshift(session);\n      if (stats.recentSessions.length > 10) {\n        stats.recentSessions = stats.recentSessions.slice(0, 10);\n      }\n      \n      // Update improvement trend\n      const accuracy = (session.answers.filter(a => a.isCorrect).length / session.answers.length) * 100;\n      stats.improvementTrend.push(accuracy);\n      if (stats.improvementTrend.length > 20) {\n        stats.improvementTrend = stats.improvementTrend.slice(-20);\n      }\n      \n      localStorage.setItem(this.KEYS.QUIZ_STATS, JSON.stringify(stats));\n    } catch (error) {\n      console.error('Failed to update quiz stats:', error);\n    }\n  }\n\n  private static getDefaultStats(): QuizStats {\n    return {\n      totalQuestions: 0,\n      correctAnswers: 0,\n      incorrectAnswers: 0,\n      averageTimePerQuestion: 0,\n      categoryPerformance: {},\n      difficultyPerformance: {},\n      recentSessions: [],\n      improvementTrend: []\n    };\n  }\n\n  // Theme Management\n  static getTheme(): 'light' | 'dark' | 'auto' {\n    try {\n      const theme = localStorage.getItem(this.KEYS.THEME) as 'light' | 'dark' | 'auto';\n      return theme || 'auto';\n    } catch (error) {\n      console.error('Failed to load theme:', error);\n      return 'auto';\n    }\n  }\n\n  static saveTheme(theme: 'light' | 'dark' | 'auto'): void {\n    try {\n      localStorage.setItem(this.KEYS.THEME, theme);\n    } catch (error) {\n      console.error('Failed to save theme:', error);\n    }\n  }\n\n  // Data Export/Import\n  static exportData(): string {\n    try {\n      const data = {\n        sessions: this.getSessions(),\n        settings: this.getSettings(),\n        bookmarks: this.getBookmarkedQuestions(),\n        stats: this.getStats(),\n        theme: this.getTheme(),\n        exportDate: new Date().toISOString(),\n        version: '2.0.0'\n      };\n      \n      return JSON.stringify(data, null, 2);\n    } catch (error) {\n      console.error('Failed to export data:', error);\n      throw new Error('Failed to export data');\n    }\n  }\n\n  static importData(jsonData: string): boolean {\n    try {\n      const data = JSON.parse(jsonData);\n      \n      if (data.version && data.exportDate) {\n        // Import sessions\n        if (data.sessions) {\n          localStorage.setItem(this.KEYS.QUIZ_SESSIONS, JSON.stringify(data.sessions));\n        }\n        \n        // Import settings\n        if (data.settings) {\n          localStorage.setItem(this.KEYS.QUIZ_SETTINGS, JSON.stringify(data.settings));\n        }\n        \n        // Import bookmarks\n        if (data.bookmarks) {\n          localStorage.setItem(this.KEYS.BOOKMARKED_QUESTIONS, JSON.stringify(data.bookmarks));\n        }\n        \n        // Import stats\n        if (data.stats) {\n          localStorage.setItem(this.KEYS.QUIZ_STATS, JSON.stringify(data.stats));\n        }\n        \n        // Import theme\n        if (data.theme) {\n          localStorage.setItem(this.KEYS.THEME, data.theme);\n        }\n        \n        return true;\n      }\n      \n      return false;\n    } catch (error) {\n      console.error('Failed to import data:', error);\n      return false;\n    }\n  }\n\n  // Clear all data\n  static clearAllData(): void {\n    try {\n      Object.values(this.KEYS).forEach(key => {\n        localStorage.removeItem(key);\n      });\n    } catch (error) {\n      console.error('Failed to clear data:', error);\n    }\n  }\n}","import { QuizManager } from './utils/quiz-manager.ts';\nimport { StorageManager } from './utils/storage.ts';\nimport type { QuizMode } from './types/quiz.ts';\n\n// Initialize the quiz manager\nconst quizManager = new QuizManager();\n\n// DOM elements\nconst statsSection = document.getElementById('stats-section');\nconst headerStats = document.getElementById('header-stats');\nconst recentActivity = document.getElementById('recent-activity');\nconst continueSession = document.getElementById('continue-session');\nconst sessionInfo = document.getElementById('session-info');\n\n// Initialize the application\ndocument.addEventListener('DOMContentLoaded', () => {\n  initializeApp();\n  setupEventListeners();\n  checkForExistingSession();\n});\n\nfunction initializeApp() {\n  // Load and display stats\n  displayHeaderStats();\n  displayQuickStats();\n  displayRecentActivity();\n  \n  // Initialize theme\n  initializeTheme();\n}\n\nfunction setupEventListeners() {\n  // Quiz mode buttons\n  const modeButtons = document.querySelectorAll('.mode-btn');\n  modeButtons.forEach(button => {\n    button.addEventListener('click', (e) => {\n      const target = e.target as HTMLButtonElement;\n      const mode = target.getAttribute('data-mode') as QuizMode;\n      if (mode) {\n        startQuizMode(mode);\n      }\n    });\n  });\n\n  // Quick action buttons\n  document.getElementById('view-bookmarks')?.addEventListener('click', viewBookmarks);\n  document.getElementById('view-stats')?.addEventListener('click', viewDetailedStats);\n  document.getElementById('export-data')?.addEventListener('click', exportData);\n  document.getElementById('settings')?.addEventListener('click', openSettings);\n\n  // Continue session buttons\n  document.getElementById('continue-btn')?.addEventListener('click', continueExistingSession);\n  document.getElementById('new-session-btn')?.addEventListener('click', startNewSession);\n}\n\nfunction displayHeaderStats() {\n  if (!headerStats) return;\n  \n  const stats = StorageManager.getStats();\n  const totalQuestions = stats.totalQuestions || 0;\n  const accuracy = totalQuestions > 0 ? Math.round((stats.correctAnswers / stats.totalQuestions) * 100) : 0;\n  \n  headerStats.innerHTML = `\n    <div class=\"stat-item\">\n      <span class=\"stat-value\">${totalQuestions}</span>\n      <span class=\"stat-label\">Questions Answered</span>\n    </div>\n    <div class=\"stat-item\">\n      <span class=\"stat-value\">${accuracy}%</span>\n      <span class=\"stat-label\">Overall Accuracy</span>\n    </div>\n    <div class=\"stat-item\">\n      <span class=\"stat-value\">${stats.recentSessions.length}</span>\n      <span class=\"stat-label\">Sessions Completed</span>\n    </div>\n  `;\n}\n\nfunction displayQuickStats() {\n  if (!statsSection) return;\n  \n  const stats = StorageManager.getStats();\n  const bookmarks = StorageManager.getBookmarkedQuestions();\n  \n  statsSection.innerHTML = `\n    <div class=\"stats-grid\">\n      <div class=\"stat-card card\">\n        <div class=\"stat-icon\">📊</div>\n        <div class=\"stat-content\">\n          <h3>${stats.totalQuestions}</h3>\n          <p>Total Questions</p>\n        </div>\n      </div>\n      <div class=\"stat-card card\">\n        <div class=\"stat-icon\">✅</div>\n        <div class=\"stat-content\">\n          <h3>${stats.correctAnswers}</h3>\n          <p>Correct Answers</p>\n        </div>\n      </div>\n      <div class=\"stat-card card\">\n        <div class=\"stat-icon\">⭐</div>\n        <div class=\"stat-content\">\n          <h3>${bookmarks.length}</h3>\n          <p>Bookmarked</p>\n        </div>\n      </div>\n      <div class=\"stat-card card\">\n        <div class=\"stat-icon\">🎯</div>\n        <div class=\"stat-content\">\n          <h3>${Math.round((stats.correctAnswers / Math.max(stats.totalQuestions, 1)) * 100)}%</h3>\n          <p>Accuracy</p>\n        </div>\n      </div>\n    </div>\n  `;\n}\n\nfunction displayRecentActivity() {\n  if (!recentActivity) return;\n  \n  const sessions = StorageManager.getSessions().slice(-5).reverse();\n  \n  if (sessions.length === 0) {\n    recentActivity.innerHTML = `\n      <div class=\"no-activity card\">\n        <p>No recent activity. Start your first quiz to see your progress here!</p>\n      </div>\n    `;\n    return;\n  }\n\n  recentActivity.innerHTML = sessions.map(session => `\n    <div class=\"activity-item card\">\n      <div class=\"activity-info\">\n        <h4>${session.mode.charAt(0).toUpperCase() + session.mode.slice(1)} Mode</h4>\n        <p>${session.questions.length} questions • ${Math.round(session.score || 0)}% score</p>\n        <small>${new Date(session.startTime).toLocaleDateString()}</small>\n      </div>\n      <div class=\"activity-score ${(session.score || 0) >= 70 ? 'good' : 'needs-improvement'}\">\n        ${Math.round(session.score || 0)}%\n      </div>\n    </div>\n  `).join('');\n}\n\nfunction checkForExistingSession() {\n  const currentSession = StorageManager.getCurrentSession();\n  if (currentSession && !currentSession.isCompleted && continueSession && sessionInfo) {\n    const progress = (currentSession.currentQuestionIndex / currentSession.questions.length) * 100;\n    \n    sessionInfo.innerHTML = `\n      <div class=\"session-details\">\n        <p><strong>Mode:</strong> ${currentSession.mode.charAt(0).toUpperCase() + currentSession.mode.slice(1)}</p>\n        <p><strong>Progress:</strong> ${currentSession.currentQuestionIndex + 1}/${currentSession.questions.length} questions</p>\n        <p><strong>Started:</strong> ${new Date(currentSession.startTime).toLocaleString()}</p>\n        <div class=\"progress-bar\">\n          <div class=\"progress-fill\" style=\"width: ${progress}%\"></div>\n        </div>\n      </div>\n    `;\n    \n    continueSession.style.display = 'block';\n  }\n}\n\nfunction startQuizMode(mode: QuizMode) {\n  // For now, just show an alert - in a full implementation this would navigate to the quiz interface\n  alert(`Starting ${mode} mode! This would navigate to the quiz interface.`);\n  \n  // Example of starting a session (commented out as it needs proper quiz interface)\n  // const session = quizManager.startNewSession(mode, {\n  //   questionsCount: 50,\n  //   randomize: true\n  // });\n  // window.location.href = '/quiz.html';\n}\n\nfunction continueExistingSession() {\n  const session = quizManager.resumeSession();\n  if (session) {\n    alert('Continuing existing session! This would navigate to the quiz interface.');\n    // window.location.href = '/quiz.html';\n  }\n}\n\nfunction startNewSession() {\n  StorageManager.clearCurrentSession();\n  if (continueSession) {\n    continueSession.style.display = 'none';\n  }\n}\n\nfunction viewBookmarks() {\n  const bookmarks = StorageManager.getBookmarkedQuestions();\n  alert(`You have ${bookmarks.length} bookmarked questions. This would open the bookmarks view.`);\n}\n\nfunction viewDetailedStats() {\n  const stats = quizManager.getDetailedStats();\n  console.log('Detailed stats:', stats);\n  alert('Opening detailed statistics view...');\n}\n\nfunction exportData() {\n  try {\n    const stats = StorageManager.getStats();\n    const sessions = StorageManager.getSessions();\n    const bookmarks = StorageManager.getBookmarkedQuestions();\n    \n    const exportData = {\n      stats,\n      sessions,\n      bookmarks,\n      exportDate: new Date().toISOString()\n    };\n    \n    const dataStr = JSON.stringify(exportData, null, 2);\n    const dataBlob = new Blob([dataStr], { type: 'application/json' });\n    \n    const link = document.createElement('a');\n    link.href = URL.createObjectURL(dataBlob);\n    link.download = `gcp-quiz-data-${new Date().toISOString().split('T')[0]}.json`;\n    link.click();\n    \n    URL.revokeObjectURL(link.href);\n  } catch (error) {\n    console.error('Export failed:', error);\n    alert('Failed to export data. Please try again.');\n  }\n}\n\nfunction openSettings() {\n  alert('Settings panel would open here. This would show theme, notification, and quiz preferences.');\n}\n\nfunction initializeTheme() {\n  const savedTheme = localStorage.getItem('theme') || 'auto';\n  const themeToggleContainer = document.getElementById('theme-toggle-container');\n  \n  if (themeToggleContainer) {\n    themeToggleContainer.innerHTML = `\n      <button id=\"theme-toggle\" class=\"theme-toggle\" title=\"Toggle theme\">\n        <span class=\"theme-icon\">🌓</span>\n      </button>\n    `;\n    \n    const themeToggle = document.getElementById('theme-toggle');\n    themeToggle?.addEventListener('click', toggleTheme);\n  }\n  \n  applyTheme(savedTheme);\n}\n\nfunction toggleTheme() {\n  const currentTheme = document.documentElement.getAttribute('data-theme') || 'light';\n  const newTheme = currentTheme === 'light' ? 'dark' : 'light';\n  applyTheme(newTheme);\n  localStorage.setItem('theme', newTheme);\n}\n\nfunction applyTheme(theme: string) {\n  if (theme === 'auto') {\n    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n    theme = prefersDark ? 'dark' : 'light';\n  }\n  \n  document.documentElement.setAttribute('data-theme', theme);\n}","import type { Question, QuizSession, UserAnswer, QuizSettings, QuizMode } from '../types/quiz.ts';\nimport { StorageManager } from './storage.ts';\n\nexport class QuizManager {\n  private currentSession: QuizSession | null = null;\n  private questions: Question[] = [];\n  private settings: QuizSettings;\n  private questionStartTime: number = 0;\n\n  constructor() {\n    this.settings = StorageManager.getSettings();\n    this.loadQuestions();\n  }\n\n  // Question Management\n  private async loadQuestions(): Promise<void> {\n    try {\n      const response = await fetch('/data/questions.json');\n      this.questions = await response.json();\n    } catch (error) {\n      console.error('Failed to load questions:', error);\n      // Fallback to empty array or default questions\n      this.questions = [];\n    }\n  }\n\n  getQuestions(): Question[] {\n    return this.questions;\n  }\n\n  getQuestionById(id: string): Question | undefined {\n    return this.questions.find(q => q.id === id);\n  }\n\n  getQuestionsByCategory(category: string): Question[] {\n    return this.questions.filter(q => q.category === category);\n  }\n\n  getQuestionsByDifficulty(difficulty: 'easy' | 'medium' | 'hard'): Question[] {\n    return this.questions.filter(q => q.difficulty === difficulty);\n  }\n\n  searchQuestions(query: string): Question[] {\n    const lowercaseQuery = query.toLowerCase();\n    return this.questions.filter(q => \n      q.text.toLowerCase().includes(lowercaseQuery) ||\n      q.options.some(option => option.text.toLowerCase().includes(lowercaseQuery)) ||\n      q.tags?.some(tag => tag.toLowerCase().includes(lowercaseQuery))\n    );\n  }\n\n  // Session Management\n  startNewSession(mode: QuizMode, options: {\n    questionsCount?: number;\n    timeLimit?: number;\n    categories?: string[];\n    difficulties?: string[];\n    randomize?: boolean;\n  } = {}): QuizSession {\n    const sessionId = this.generateSessionId();\n    let sessionQuestions = [...this.questions];\n\n    // Filter by categories\n    if (options.categories && options.categories.length > 0) {\n      sessionQuestions = sessionQuestions.filter(q => \n        options.categories!.includes(q.category || 'Unknown')\n      );\n    }\n\n    // Filter by difficulties\n    if (options.difficulties && options.difficulties.length > 0) {\n      sessionQuestions = sessionQuestions.filter(q => \n        options.difficulties!.includes(q.difficulty || 'medium')\n      );\n    }\n\n    // Randomize questions if requested\n    if (options.randomize || this.settings.randomizeQuestions) {\n      sessionQuestions = this.shuffleArray(sessionQuestions);\n    }\n\n    // Limit number of questions\n    const questionsCount = options.questionsCount || this.settings.questionsPerSession;\n    if (questionsCount > 0 && questionsCount < sessionQuestions.length) {\n      sessionQuestions = sessionQuestions.slice(0, questionsCount);\n    }\n\n    // Randomize options if enabled\n    if (this.settings.randomizeOptions) {\n      sessionQuestions = sessionQuestions.map(q => ({\n        ...q,\n        options: this.shuffleArray([...q.options])\n      }));\n    }\n\n    this.currentSession = {\n      id: sessionId,\n      startTime: new Date(),\n      mode,\n      timeLimit: options.timeLimit,\n      questions: sessionQuestions,\n      answers: [],\n      currentQuestionIndex: 0,\n      isCompleted: false,\n      settings: { ...this.settings }\n    };\n\n    this.questionStartTime = Date.now();\n    StorageManager.saveCurrentSession(this.currentSession);\n    return this.currentSession;\n  }\n\n  resumeSession(): QuizSession | null {\n    const session = StorageManager.getCurrentSession();\n    if (session && !session.isCompleted) {\n      this.currentSession = session;\n      this.questionStartTime = Date.now();\n      return session;\n    }\n    return null;\n  }\n\n  getCurrentSession(): QuizSession | null {\n    return this.currentSession;\n  }\n\n  getCurrentQuestion(): Question | null {\n    if (!this.currentSession) return null;\n    const index = this.currentSession.currentQuestionIndex;\n    return this.currentSession.questions[index] || null;\n  }\n\n  // Answer Management\n  submitAnswer(questionId: string, selectedOptionId: string): UserAnswer {\n    if (!this.currentSession) {\n      throw new Error('No active quiz session');\n    }\n\n    const question = this.currentSession.questions.find(q => q.id === questionId);\n    if (!question) {\n      throw new Error('Question not found in current session');\n    }\n\n    const selectedOption = question.options.find(o => o.id === selectedOptionId);\n    if (!selectedOption) {\n      throw new Error('Invalid option selected');\n    }\n\n    const timeSpent = Date.now() - this.questionStartTime;\n    const answer: UserAnswer = {\n      questionId,\n      selectedOption: selectedOptionId,\n      isCorrect: selectedOption.isCorrect,\n      timeSpent,\n      timestamp: new Date()\n    };\n\n    // Add answer to session\n    this.currentSession.answers.push(answer);\n    \n    // Move to next question or complete session\n    if (this.currentSession.currentQuestionIndex < this.currentSession.questions.length - 1) {\n      this.currentSession.currentQuestionIndex++;\n      this.questionStartTime = Date.now();\n    } else {\n      this.completeSession();\n    }\n\n    StorageManager.saveCurrentSession(this.currentSession);\n    return answer;\n  }\n\n  getAnswerForQuestion(questionId: string): UserAnswer | undefined {\n    if (!this.currentSession) return undefined;\n    return this.currentSession.answers.find(a => a.questionId === questionId);\n  }\n\n  // Navigation\n  goToQuestion(index: number): boolean {\n    if (!this.currentSession || index < 0 || index >= this.currentSession.questions.length) {\n      return false;\n    }\n\n    this.currentSession.currentQuestionIndex = index;\n    this.questionStartTime = Date.now();\n    StorageManager.saveCurrentSession(this.currentSession);\n    return true;\n  }\n\n  goToNextQuestion(): boolean {\n    if (!this.currentSession) return false;\n    return this.goToQuestion(this.currentSession.currentQuestionIndex + 1);\n  }\n\n  goToPreviousQuestion(): boolean {\n    if (!this.currentSession) return false;\n    return this.goToQuestion(this.currentSession.currentQuestionIndex - 1);\n  }\n\n  // Session Completion\n  completeSession(): QuizSession {\n    if (!this.currentSession) {\n      throw new Error('No active quiz session');\n    }\n\n    this.currentSession.isCompleted = true;\n    this.currentSession.endTime = new Date();\n    \n    // Calculate score\n    const correctAnswers = this.currentSession.answers.filter(a => a.isCorrect).length;\n    this.currentSession.score = (correctAnswers / this.currentSession.answers.length) * 100;\n\n    // Save to storage\n    StorageManager.saveSession(this.currentSession);\n    StorageManager.updateStats(this.currentSession);\n    StorageManager.clearCurrentSession();\n\n    const completedSession = this.currentSession;\n    this.currentSession = null;\n    \n    return completedSession;\n  }\n\n  // Progress Tracking\n  getProgress(): {\n    current: number;\n    total: number;\n    percentage: number;\n    answered: number;\n    correct: number;\n    incorrect: number;\n  } {\n    if (!this.currentSession) {\n      return { current: 0, total: 0, percentage: 0, answered: 0, correct: 0, incorrect: 0 };\n    }\n\n    const current = this.currentSession.currentQuestionIndex + 1;\n    const total = this.currentSession.questions.length;\n    const answered = this.currentSession.answers.length;\n    const correct = this.currentSession.answers.filter(a => a.isCorrect).length;\n    const incorrect = answered - correct;\n\n    return {\n      current,\n      total,\n      percentage: (current / total) * 100,\n      answered,\n      correct,\n      incorrect\n    };\n  }\n\n  // Time Management\n  getRemainingTime(): number | null {\n    if (!this.currentSession || !this.currentSession.timeLimit) return null;\n    \n    const elapsed = Date.now() - this.currentSession.startTime.getTime();\n    const remaining = (this.currentSession.timeLimit * 60 * 1000) - elapsed;\n    return Math.max(0, remaining);\n  }\n\n  getQuestionTime(): number {\n    return Date.now() - this.questionStartTime;\n  }\n\n  // Settings\n  updateSettings(newSettings: Partial<QuizSettings>): void {\n    this.settings = { ...this.settings, ...newSettings };\n    StorageManager.saveSettings(this.settings);\n    \n    if (this.currentSession) {\n      this.currentSession.settings = { ...this.settings };\n      StorageManager.saveCurrentSession(this.currentSession);\n    }\n  }\n\n  getSettings(): QuizSettings {\n    return { ...this.settings };\n  }\n\n  // Utility Methods\n  private generateSessionId(): string {\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private shuffleArray<T>(array: T[]): T[] {\n    const shuffled = [...array];\n    for (let i = shuffled.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n    }\n    return shuffled;\n  }\n\n  // Bookmarks\n  toggleBookmark(questionId: string): boolean {\n    const question = this.getQuestionById(questionId);\n    if (!question) return false;\n\n    if (StorageManager.isBookmarked(questionId)) {\n      StorageManager.removeBookmark(questionId);\n      return false;\n    } else {\n      StorageManager.addBookmark({\n        questionId,\n        questionNumber: question.questionNumber,\n        text: question.text.substring(0, 100) + '...',\n        source: question.source || 'unknown',\n        timestamp: new Date()\n      });\n      return true;\n    }\n  }\n\n  isQuestionBookmarked(questionId: string): boolean {\n    return StorageManager.isBookmarked(questionId);\n  }\n\n  // Review Mode\n  getIncorrectQuestions(): Question[] {\n    const sessions = StorageManager.getSessions();\n    const incorrectQuestionIds = new Set<string>();\n\n    sessions.forEach(session => {\n      session.answers.forEach(answer => {\n        if (!answer.isCorrect) {\n          incorrectQuestionIds.add(answer.questionId);\n        }\n      });\n    });\n\n    return this.questions.filter(q => incorrectQuestionIds.has(q.id));\n  }\n\n  getBookmarkedQuestions(): Question[] {\n    const bookmarks = StorageManager.getBookmarkedQuestions();\n    const bookmarkedIds = bookmarks.map(b => b.questionId);\n    return this.questions.filter(q => bookmarkedIds.includes(q.id));\n  }\n\n  // Statistics\n  getDetailedStats() {\n    return StorageManager.getStats();\n  }\n\n  // Export functionality\n  exportResults(): string {\n    if (!this.currentSession) {\n      throw new Error('No active session to export');\n    }\n\n    const results = {\n      sessionId: this.currentSession.id,\n      startTime: this.currentSession.startTime,\n      endTime: this.currentSession.endTime,\n      mode: this.currentSession.mode,\n      score: this.currentSession.score,\n      questions: this.currentSession.questions.length,\n      answers: this.currentSession.answers.map(answer => {\n        const question = this.currentSession!.questions.find(q => q.id === answer.questionId);\n        return {\n          questionNumber: question?.questionNumber,\n          questionText: question?.text.substring(0, 100) + '...',\n          selectedAnswer: answer.selectedOption,\n          correctAnswer: question?.correctAnswer,\n          isCorrect: answer.isCorrect,\n          timeSpent: answer.timeSpent\n        };\n      })\n    };\n\n    return JSON.stringify(results, null, 2);\n  }\n}"],"names":["_StorageManager","saveSession","session","sessions","this","getSessions","existingIndex","findIndex","s","id","push","length","splice","localStorage","setItem","KEYS","QUIZ_SESSIONS","JSON","stringify","error","console","data","getItem","parse","map","startTime","Date","endTime","answers","answer","timestamp","getCurrentSession","CURRENT_SESSION","saveCurrentSession","clearCurrentSession","removeItem","getSettings","QUIZ_SETTINGS","getDefaultSettings","saveSettings","settings","newSettings","theme","showExplanations","showTimer","autoAdvance","randomizeQuestions","randomizeOptions","questionsPerSession","enableSound","getBookmarkedQuestions","BOOKMARKED_QUESTIONS","bookmark","addBookmark","bookmarks","b","questionId","removeBookmark","filtered","filter","isBookmarked","some","getStats","QUIZ_STATS","getDefaultStats","stats","recentSessions","updateStats","totalQuestions","correctAnswers","a","isCorrect","incorrectAnswers","totalTime","reduce","sum","timeSpent","averageTimePerQuestion","questions","forEach","question","index","category","categoryPerformance","accuracy","averageTime","categoryStats","difficulty","difficultyPerformance","difficultyStats","unshift","slice","improvementTrend","getTheme","THEME","saveTheme","exportData","exportDate","toISOString","version","Error","importData","jsonData","clearAllData","Object","values","key","StorageManager","quizManager","constructor","currentSession","questionStartTime","loadQuestions","response","fetch","json","getQuestions","getQuestionById","find","q","getQuestionsByCategory","getQuestionsByDifficulty","searchQuestions","query","lowercaseQuery","toLowerCase","text","includes","options","option","tags","tag","startNewSession","mode","sessionId","generateSessionId","sessionQuestions","categories","difficulties","randomize","shuffleArray","questionsCount","timeLimit","currentQuestionIndex","isCompleted","now","resumeSession","getCurrentQuestion","submitAnswer","selectedOptionId","selectedOption","o","completeSession","getAnswerForQuestion","goToQuestion","goToNextQuestion","goToPreviousQuestion","score","completedSession","getProgress","current","total","percentage","answered","correct","incorrect","getRemainingTime","elapsed","getTime","remaining","Math","max","getQuestionTime","updateSettings","random","toString","substr","array","shuffled","i","j","floor","toggleBookmark","questionNumber","substring","source","isQuestionBookmarked","getIncorrectQuestions","incorrectQuestionIds","Set","add","has","bookmarkedIds","getDetailedStats","exportResults","results","questionText","selectedAnswer","correctAnswer","statsSection","document","getElementById","headerStats","recentActivity","continueSession","sessionInfo","continueExistingSession","alert","style","display","viewBookmarks","viewDetailedStats","log","dataStr","dataBlob","Blob","type","link","createElement","href","URL","createObjectURL","download","split","click","revokeObjectURL","openSettings","toggleTheme","newTheme","documentElement","getAttribute","applyTheme","window","matchMedia","matches","setAttribute","addEventListener","round","innerHTML","displayHeaderStats","displayQuickStats","reverse","charAt","toUpperCase","toLocaleDateString","join","displayRecentActivity","savedTheme","themeToggleContainer","themeToggle","initializeTheme","querySelectorAll","button","e","target","startQuizMode","progress","toLocaleString","checkForExistingSession"],"mappings":"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"}