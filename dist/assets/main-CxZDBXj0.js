!function(){const t=document.createElement("link").relList;if(!(t&&t.supports&&t.supports("modulepreload"))){for(const t of document.querySelectorAll('link[rel="modulepreload"]'))e(t);new MutationObserver(t=>{for(const s of t)if("childList"===s.type)for(const t of s.addedNodes)"LINK"===t.tagName&&"modulepreload"===t.rel&&e(t)}).observe(document,{childList:!0,subtree:!0})}function e(t){if(t.ep)return;t.ep=!0;const e=function(t){const e={};return t.integrity&&(e.integrity=t.integrity),t.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),"use-credentials"===t.crossOrigin?e.credentials="include":"anonymous"===t.crossOrigin?e.credentials="omit":e.credentials="same-origin",e}(t);fetch(t.href,e)}}();const t=class{static saveSession(t){try{const e=this.getSessions(),s=e.findIndex(e=>e.id===t.id);s>=0?e[s]=t:e.push(t),e.length>50&&e.splice(0,e.length-50),localStorage.setItem(this.KEYS.QUIZ_SESSIONS,JSON.stringify(e))}catch(e){console.error("Failed to save quiz session:",e)}}static getSessions(){try{const t=localStorage.getItem(this.KEYS.QUIZ_SESSIONS);if(!t)return[];return JSON.parse(t).map(t=>({...t,startTime:new Date(t.startTime),endTime:t.endTime?new Date(t.endTime):void 0,answers:t.answers.map(t=>({...t,timestamp:new Date(t.timestamp)}))}))}catch(t){return console.error("Failed to load quiz sessions:",t),[]}}static getCurrentSession(){try{const t=localStorage.getItem(this.KEYS.CURRENT_SESSION);if(!t)return null;const e=JSON.parse(t);return{...e,startTime:new Date(e.startTime),endTime:e.endTime?new Date(e.endTime):void 0,answers:e.answers.map(t=>({...t,timestamp:new Date(t.timestamp)}))}}catch(t){return console.error("Failed to load current session:",t),null}}static saveCurrentSession(t){try{localStorage.setItem(this.KEYS.CURRENT_SESSION,JSON.stringify(t))}catch(e){console.error("Failed to save current session:",e)}}static clearCurrentSession(){localStorage.removeItem(this.KEYS.CURRENT_SESSION)}static getSettings(){try{const t=localStorage.getItem(this.KEYS.QUIZ_SETTINGS);return t?{...this.getDefaultSettings(),...JSON.parse(t)}:this.getDefaultSettings()}catch(t){return console.error("Failed to load quiz settings:",t),this.getDefaultSettings()}}static saveSettings(t){try{const e={...this.getSettings(),...t};localStorage.setItem(this.KEYS.QUIZ_SETTINGS,JSON.stringify(e))}catch(e){console.error("Failed to save quiz settings:",e)}}static getDefaultSettings(){return{theme:"auto",showExplanations:!0,showTimer:!0,autoAdvance:!1,randomizeQuestions:!1,randomizeOptions:!1,questionsPerSession:25,enableSound:!1}}static getBookmarkedQuestions(){try{const t=localStorage.getItem(this.KEYS.BOOKMARKED_QUESTIONS);if(!t)return[];return JSON.parse(t).map(t=>({...t,timestamp:new Date(t.timestamp)}))}catch(t){return console.error("Failed to load bookmarked questions:",t),[]}}static addBookmark(t){try{const e=this.getBookmarkedQuestions(),s=e.findIndex(e=>e.questionId===t.questionId);s>=0?e[s]=t:e.push(t),localStorage.setItem(this.KEYS.BOOKMARKED_QUESTIONS,JSON.stringify(e))}catch(e){console.error("Failed to add bookmark:",e)}}static removeBookmark(t){try{const e=this.getBookmarkedQuestions().filter(e=>e.questionId!==t);localStorage.setItem(this.KEYS.BOOKMARKED_QUESTIONS,JSON.stringify(e))}catch(e){console.error("Failed to remove bookmark:",e)}}static isBookmarked(t){return this.getBookmarkedQuestions().some(e=>e.questionId===t)}static getStats(){try{const t=localStorage.getItem(this.KEYS.QUIZ_STATS);if(!t)return this.getDefaultStats();const e=JSON.parse(t);return{...e,recentSessions:e.recentSessions.map(t=>({...t,startTime:new Date(t.startTime),endTime:t.endTime?new Date(t.endTime):void 0}))}}catch(t){return console.error("Failed to load quiz stats:",t),this.getDefaultStats()}}static updateStats(t){try{const e=this.getStats();e.totalQuestions+=t.answers.length,e.correctAnswers+=t.answers.filter(t=>t.isCorrect).length,e.incorrectAnswers+=t.answers.filter(t=>!t.isCorrect).length;const s=t.answers.reduce((t,e)=>t+e.timeSpent,0);e.averageTimePerQuestion=s/t.answers.length,t.questions.forEach((s,n)=>{const i=t.answers[n];if(!i)return;const r=s.category||"Unknown";e.categoryPerformance[r]||(e.categoryPerformance[r]={category:r,totalQuestions:0,correctAnswers:0,accuracy:0,averageTime:0});const o=e.categoryPerformance[r];o.totalQuestions++,i.isCorrect&&o.correctAnswers++,o.accuracy=o.correctAnswers/o.totalQuestions*100,o.averageTime=i.timeSpent}),t.questions.forEach((s,n)=>{const i=t.answers[n];if(!i)return;const r=s.difficulty||"medium";e.difficultyPerformance[r]||(e.difficultyPerformance[r]={difficulty:r,totalQuestions:0,correctAnswers:0,accuracy:0,averageTime:0});const o=e.difficultyPerformance[r];o.totalQuestions++,i.isCorrect&&o.correctAnswers++,o.accuracy=o.correctAnswers/o.totalQuestions*100,o.averageTime=i.timeSpent}),e.recentSessions.unshift(t),e.recentSessions.length>10&&(e.recentSessions=e.recentSessions.slice(0,10));const n=t.answers.filter(t=>t.isCorrect).length/t.answers.length*100;e.improvementTrend.push(n),e.improvementTrend.length>20&&(e.improvementTrend=e.improvementTrend.slice(-20)),localStorage.setItem(this.KEYS.QUIZ_STATS,JSON.stringify(e))}catch(e){console.error("Failed to update quiz stats:",e)}}static getDefaultStats(){return{totalQuestions:0,correctAnswers:0,incorrectAnswers:0,averageTimePerQuestion:0,categoryPerformance:{},difficultyPerformance:{},recentSessions:[],improvementTrend:[]}}static getTheme(){try{return localStorage.getItem(this.KEYS.THEME)||"auto"}catch(t){return console.error("Failed to load theme:",t),"auto"}}static saveTheme(t){try{localStorage.setItem(this.KEYS.THEME,t)}catch(e){console.error("Failed to save theme:",e)}}static exportData(){try{const t={sessions:this.getSessions(),settings:this.getSettings(),bookmarks:this.getBookmarkedQuestions(),stats:this.getStats(),theme:this.getTheme(),exportDate:(new Date).toISOString(),version:"2.0.0"};return JSON.stringify(t,null,2)}catch(t){throw console.error("Failed to export data:",t),new Error("Failed to export data")}}static importData(t){try{const e=JSON.parse(t);return!(!e.version||!e.exportDate)&&(e.sessions&&localStorage.setItem(this.KEYS.QUIZ_SESSIONS,JSON.stringify(e.sessions)),e.settings&&localStorage.setItem(this.KEYS.QUIZ_SETTINGS,JSON.stringify(e.settings)),e.bookmarks&&localStorage.setItem(this.KEYS.BOOKMARKED_QUESTIONS,JSON.stringify(e.bookmarks)),e.stats&&localStorage.setItem(this.KEYS.QUIZ_STATS,JSON.stringify(e.stats)),e.theme&&localStorage.setItem(this.KEYS.THEME,e.theme),!0)}catch(e){return console.error("Failed to import data:",e),!1}}static clearAllData(){try{Object.values(this.KEYS).forEach(t=>{localStorage.removeItem(t)})}catch(t){console.error("Failed to clear data:",t)}}};t.KEYS={QUIZ_SESSIONS:"gcp-quiz-sessions",QUIZ_SETTINGS:"gcp-quiz-settings",BOOKMARKED_QUESTIONS:"gcp-quiz-bookmarks",QUIZ_STATS:"gcp-quiz-stats",CURRENT_SESSION:"gcp-quiz-current-session",THEME:"gcp-quiz-theme"};let e=t;const s=new class{constructor(){this.currentSession=null,this.questions=[],this.questionStartTime=0,this.settings=e.getSettings(),this.loadQuestions()}async loadQuestions(){try{const t=await fetch("/data/questions.json");this.questions=await t.json()}catch(t){console.error("Failed to load questions:",t),this.questions=[]}}getQuestions(){return this.questions}getQuestionById(t){return this.questions.find(e=>e.id===t)}getQuestionsByCategory(t){return this.questions.filter(e=>e.category===t)}getQuestionsByDifficulty(t){return this.questions.filter(e=>e.difficulty===t)}searchQuestions(t){const e=t.toLowerCase();return this.questions.filter(t=>t.text.toLowerCase().includes(e)||t.options.some(t=>t.text.toLowerCase().includes(e))||t.tags?.some(t=>t.toLowerCase().includes(e)))}startNewSession(t,s={}){const n=this.generateSessionId();let i=[...this.questions];s.categories&&s.categories.length>0&&(i=i.filter(t=>s.categories.includes(t.category||"Unknown"))),s.difficulties&&s.difficulties.length>0&&(i=i.filter(t=>s.difficulties.includes(t.difficulty||"medium"))),(s.randomize||this.settings.randomizeQuestions)&&(i=this.shuffleArray(i));const r=s.questionsCount||this.settings.questionsPerSession;return r>0&&r<i.length&&(i=i.slice(0,r)),this.settings.randomizeOptions&&(i=i.map(t=>({...t,options:this.shuffleArray([...t.options])}))),this.currentSession={id:n,startTime:new Date,mode:t,timeLimit:s.timeLimit,questions:i,answers:[],currentQuestionIndex:0,isCompleted:!1,settings:{...this.settings}},this.questionStartTime=Date.now(),e.saveCurrentSession(this.currentSession),this.currentSession}resumeSession(){const t=e.getCurrentSession();return t&&!t.isCompleted?(this.currentSession=t,this.questionStartTime=Date.now(),t):null}getCurrentSession(){return this.currentSession}getCurrentQuestion(){if(!this.currentSession)return null;const t=this.currentSession.currentQuestionIndex;return this.currentSession.questions[t]||null}submitAnswer(t,s){if(!this.currentSession)throw new Error("No active quiz session");const n=this.currentSession.questions.find(e=>e.id===t);if(!n)throw new Error("Question not found in current session");const i=n.options.find(t=>t.id===s);if(!i)throw new Error("Invalid option selected");const r=Date.now()-this.questionStartTime,o={questionId:t,selectedOption:s,isCorrect:i.isCorrect,timeSpent:r,timestamp:new Date};return this.currentSession.answers.push(o),this.currentSession.currentQuestionIndex<this.currentSession.questions.length-1?(this.currentSession.currentQuestionIndex++,this.questionStartTime=Date.now()):this.completeSession(),e.saveCurrentSession(this.currentSession),o}getAnswerForQuestion(t){if(this.currentSession)return this.currentSession.answers.find(e=>e.questionId===t)}goToQuestion(t){return!(!this.currentSession||t<0||t>=this.currentSession.questions.length)&&(this.currentSession.currentQuestionIndex=t,this.questionStartTime=Date.now(),e.saveCurrentSession(this.currentSession),!0)}goToNextQuestion(){return!!this.currentSession&&this.goToQuestion(this.currentSession.currentQuestionIndex+1)}goToPreviousQuestion(){return!!this.currentSession&&this.goToQuestion(this.currentSession.currentQuestionIndex-1)}completeSession(){if(!this.currentSession)throw new Error("No active quiz session");this.currentSession.isCompleted=!0,this.currentSession.endTime=new Date;const t=this.currentSession.answers.filter(t=>t.isCorrect).length;this.currentSession.score=t/this.currentSession.answers.length*100,e.saveSession(this.currentSession),e.updateStats(this.currentSession),e.clearCurrentSession();const s=this.currentSession;return this.currentSession=null,s}getProgress(){if(!this.currentSession)return{current:0,total:0,percentage:0,answered:0,correct:0,incorrect:0};const t=this.currentSession.currentQuestionIndex+1,e=this.currentSession.questions.length,s=this.currentSession.answers.length,n=this.currentSession.answers.filter(t=>t.isCorrect).length;return{current:t,total:e,percentage:t/e*100,answered:s,correct:n,incorrect:s-n}}getRemainingTime(){if(!this.currentSession||!this.currentSession.timeLimit)return null;const t=Date.now()-this.currentSession.startTime.getTime(),e=60*this.currentSession.timeLimit*1e3-t;return Math.max(0,e)}getQuestionTime(){return Date.now()-this.questionStartTime}updateSettings(t){this.settings={...this.settings,...t},e.saveSettings(this.settings),this.currentSession&&(this.currentSession.settings={...this.settings},e.saveCurrentSession(this.currentSession))}getSettings(){return{...this.settings}}generateSessionId(){return`session_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}shuffleArray(t){const e=[...t];for(let s=e.length-1;s>0;s--){const t=Math.floor(Math.random()*(s+1));[e[s],e[t]]=[e[t],e[s]]}return e}toggleBookmark(t){const s=this.getQuestionById(t);return!!s&&(e.isBookmarked(t)?(e.removeBookmark(t),!1):(e.addBookmark({questionId:t,questionNumber:s.questionNumber,text:s.text.substring(0,100)+"...",source:s.source||"unknown",timestamp:new Date}),!0))}isQuestionBookmarked(t){return e.isBookmarked(t)}getIncorrectQuestions(){const t=e.getSessions(),s=new Set;return t.forEach(t=>{t.answers.forEach(t=>{t.isCorrect||s.add(t.questionId)})}),this.questions.filter(t=>s.has(t.id))}getBookmarkedQuestions(){const t=e.getBookmarkedQuestions().map(t=>t.questionId);return this.questions.filter(e=>t.includes(e.id))}getDetailedStats(){return e.getStats()}exportResults(){if(!this.currentSession)throw new Error("No active session to export");const t={sessionId:this.currentSession.id,startTime:this.currentSession.startTime,endTime:this.currentSession.endTime,mode:this.currentSession.mode,score:this.currentSession.score,questions:this.currentSession.questions.length,answers:this.currentSession.answers.map(t=>{const e=this.currentSession.questions.find(e=>e.id===t.questionId);return{questionNumber:e?.questionNumber,questionText:e?.text.substring(0,100)+"...",selectedAnswer:t.selectedOption,correctAnswer:e?.correctAnswer,isCorrect:t.isCorrect,timeSpent:t.timeSpent}})};return JSON.stringify(t,null,2)}},n=document.getElementById("stats-section"),i=document.getElementById("header-stats"),r=document.getElementById("recent-activity"),o=document.getElementById("continue-session"),a=document.getElementById("session-info");function c(){s.resumeSession()&&alert("Continuing existing session! This would navigate to the quiz interface.")}function u(){e.clearCurrentSession(),o&&(o.style.display="none")}function l(){const t=e.getBookmarkedQuestions();alert(`You have ${t.length} bookmarked questions. This would open the bookmarks view.`)}function d(){const t=s.getDetailedStats();console.log("Detailed stats:",t),alert("Opening detailed statistics view...")}function m(){try{const t=e.getStats(),s=e.getSessions(),n={stats:t,sessions:s,bookmarks:e.getBookmarkedQuestions(),exportDate:(new Date).toISOString()},i=JSON.stringify(n,null,2),r=new Blob([i],{type:"application/json"}),o=document.createElement("a");o.href=URL.createObjectURL(r),o.download=`gcp-quiz-data-${(new Date).toISOString().split("T")[0]}.json`,o.click(),URL.revokeObjectURL(o.href)}catch(t){console.error("Export failed:",t),alert("Failed to export data. Please try again.")}}function h(){alert("Settings panel would open here. This would show theme, notification, and quiz preferences.")}function S(){const t="light"===(document.documentElement.getAttribute("data-theme")||"light")?"dark":"light";g(t),localStorage.setItem("theme",t)}function g(t){if("auto"===t){t=window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light"}document.documentElement.setAttribute("data-theme",t)}document.addEventListener("DOMContentLoaded",()=>{(function(){if(!i)return;const t=e.getStats(),s=t.totalQuestions||0,n=s>0?Math.round(t.correctAnswers/t.totalQuestions*100):0;i.innerHTML=`\n    <div class="stat-item">\n      <span class="stat-value">${s}</span>\n      <span class="stat-label">Questions Answered</span>\n    </div>\n    <div class="stat-item">\n      <span class="stat-value">${n}%</span>\n      <span class="stat-label">Overall Accuracy</span>\n    </div>\n    <div class="stat-item">\n      <span class="stat-value">${t.recentSessions.length}</span>\n      <span class="stat-label">Sessions Completed</span>\n    </div>\n  `})(),function(){if(!n)return;const t=e.getStats(),s=e.getBookmarkedQuestions();n.innerHTML=`\n    <div class="stats-grid">\n      <div class="stat-card card">\n        <div class="stat-icon">📊</div>\n        <div class="stat-content">\n          <h3>${t.totalQuestions}</h3>\n          <p>Total Questions</p>\n        </div>\n      </div>\n      <div class="stat-card card">\n        <div class="stat-icon">✅</div>\n        <div class="stat-content">\n          <h3>${t.correctAnswers}</h3>\n          <p>Correct Answers</p>\n        </div>\n      </div>\n      <div class="stat-card card">\n        <div class="stat-icon">⭐</div>\n        <div class="stat-content">\n          <h3>${s.length}</h3>\n          <p>Bookmarked</p>\n        </div>\n      </div>\n      <div class="stat-card card">\n        <div class="stat-icon">🎯</div>\n        <div class="stat-content">\n          <h3>${Math.round(t.correctAnswers/Math.max(t.totalQuestions,1)*100)}%</h3>\n          <p>Accuracy</p>\n        </div>\n      </div>\n    </div>\n  `}(),function(){if(!r)return;const t=e.getSessions().slice(-5).reverse();0!==t.length?r.innerHTML=t.map(t=>`\n    <div class="activity-item card">\n      <div class="activity-info">\n        <h4>${t.mode.charAt(0).toUpperCase()+t.mode.slice(1)} Mode</h4>\n        <p>${t.questions.length} questions • ${Math.round(t.score||0)}% score</p>\n        <small>${new Date(t.startTime).toLocaleDateString()}</small>\n      </div>\n      <div class="activity-score ${(t.score||0)>=70?"good":"needs-improvement"}">\n        ${Math.round(t.score||0)}%\n      </div>\n    </div>\n  `).join(""):r.innerHTML='\n      <div class="no-activity card">\n        <p>No recent activity. Start your first quiz to see your progress here!</p>\n      </div>\n    '}(),function(){const t=localStorage.getItem("theme")||"auto",e=document.getElementById("theme-toggle-container");if(e){e.innerHTML='\n      <button id="theme-toggle" class="theme-toggle" title="Toggle theme">\n        <span class="theme-icon">🌓</span>\n      </button>\n    ';const t=document.getElementById("theme-toggle");t?.addEventListener("click",S)}g(t)}(),document.querySelectorAll(".mode-btn").forEach(t=>{t.addEventListener("click",t=>{const e=t.target.getAttribute("data-mode");e&&function(t){alert(`Starting ${t} mode! This would navigate to the quiz interface.`)}(e)})}),document.getElementById("view-bookmarks")?.addEventListener("click",l),document.getElementById("view-stats")?.addEventListener("click",d),document.getElementById("export-data")?.addEventListener("click",m),document.getElementById("settings")?.addEventListener("click",h),document.getElementById("continue-btn")?.addEventListener("click",c),document.getElementById("new-session-btn")?.addEventListener("click",u),function(){const t=e.getCurrentSession();if(t&&!t.isCompleted&&o&&a){const e=t.currentQuestionIndex/t.questions.length*100;a.innerHTML=`\n      <div class="session-details">\n        <p><strong>Mode:</strong> ${t.mode.charAt(0).toUpperCase()+t.mode.slice(1)}</p>\n        <p><strong>Progress:</strong> ${t.currentQuestionIndex+1}/${t.questions.length} questions</p>\n        <p><strong>Started:</strong> ${new Date(t.startTime).toLocaleString()}</p>\n        <div class="progress-bar">\n          <div class="progress-fill" style="width: ${e}%"></div>\n        </div>\n      </div>\n    `,o.style.display="block"}}()});
//# sourceMappingURL=main-CxZDBXj0.js.map
